<?php


namespace Cubetiq\Litegen\Generators\Formatter;


use Cubetiq\Litegen\Definitions\MigrationType;
use Cubetiq\Litegen\Definitions\ModelType;
use Cubetiq\Litegen\Definitions\RelationshipType;
use Cubetiq\Litegen\Generators\FormatterInterface;

class NextFormatter extends SimpleFormatter implements FormatterInterface
{
    public function format_for_migration($data)
    {
        $result=[];

//        $result=[
//            "columns"=>[
//
//            ],
//            "relationships"=>[
//
//            ]
//        ];

        $temp_columns=[];
        $temp_relationships=[];

        $migration_type=MigrationType::getConstants();
        $model_type=ModelType::getConstants();
        $relation_type=RelationshipType::getConstants();

        foreach ($data as $table_name=>$columns){
            foreach ($columns as $column_name => $config){
                if(array_search($config['type'],$migration_type)){
                    $temp_columns[$table_name][$column_name]=$config;
                }
                else if(array_search($config['type'],$model_type)){
                    $type=null;
                    switch ($config['type']){
                        case ModelType::HAS_MANY:
                            $type=RelationshipType::ONE_TO_MANY;
                            break;
                        case ModelType::HAS_ONE:
                            $type=RelationshipType::ONE_TO_ONE;
                            break;
                        default:
                            throw new \Exception("Not Implemented type : ".$config['type']);
                    }
                    $temp=[
                        "type"=>$type,
                        "from"=>[
                            "type"=>$config['type'],
                            "table"=>$table_name,
                            'column'=>'id'
                        ],
                        "to"=>[
                            "type"=>ModelType::BELONGS_TO,
                            "table"=>$column_name,
                            "column"=>$config['foreign']
                        ]
                    ];
                    $temp_relationships[$table_name."_".$column_name]=$temp;
                }
            }
        }
        return [
            "columns"=>$temp_columns,
            "relationships"=>$temp_relationships
        ];
    }

    public function format_for_model($data)
    {
        return parent::format_for_model($this->format_for_migration($data)); // TODO: Change the autogenerated stub
    }

    public function format_for_controller($data)
    {
        return $data;
    }

}
